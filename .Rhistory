library(compositions)
library(dplyr)
library(MASS)
library(brms)
library(ggplot2)
library(brms)
library(pbapply)
library(gridExtra)
library(tidybayes)
library(mgcv)
library(viridis)
library(dplyr)
### --- 2. Loading the functions for computing R2 --- ####
source("functions/bayes_R2.R")
### --- 3. Functions to simulate and fit --- ####
simulation <- function(beta = matrix(c(-1, 1, 2 ,1), byrow = TRUE, ncol = 2),
sigma = c(10, 9),
rho   = 0.9,
n,
x = NULL)
{
dim(beta)
D1 <- dim(beta)[1]
D2 <- dim(beta)[2]
if(is.null(x)){
set.seed(314)
x <- cbind(1, matrix(rnorm((D2-1)*n), ncol = D2-1))
}else{
x <- cbind(1,x)
}
#Simulating
set.seed(314)
mu <- apply(beta, 1, function(y)x %*% y)
Sigma <- matrix(sigma, ncol = 1) %*% matrix(sigma, nrow = 1)
for(i in 1:length(rho))
{
for (j in 1:length(rho))
{
if(i == j)
{
Sigma[i,j] <- Sigma[i,j]
}else{
Sigma[i,j] <- rho[i + j - 2] * Sigma[i,j]
}
}
}
# Sigma <- rho*matrix(sigma, ncol = 1) %*% matrix(sigma, nrow = 1)
# diag(Sigma) <- diag(Sigma)/rho
mu %>%
apply(., 1, function(x)
mvrnorm( n  = 1,
mu = x,
Sigma = Sigma)) %>%
t(.)-> y
z <- ilrInv(y)
yilr <- ilr(z)
colnames(x) <- c("intercept", paste0("x", 1:(D2 -1)))
data <- data.frame(yilr, x[,-1])
colnames(data)[1:D1] <- paste0("yilr", c(1:D1))
data
}
fit <- function(data, covariate = TRUE, formula1 = "x1 + x2")
{
if(covariate == FALSE)
{
bf_ilr_1 <- bf(yilr1 ~ 1) + gaussian()
bf_ilr_2 <- bf(yilr2 ~ 1) + gaussian()
}else{
bf_ilr_1 <- bf(as.formula(paste0("yilr1 ~", formula1))) + gaussian()
bf_ilr_2 <- bf(as.formula(paste0("yilr2 ~", formula1))) + gaussian()
bf_ilr_3 <- bf(as.formula(paste0("yilr3 ~", formula1))) + gaussian()
}
#Fitting
bprior <-  c(prior(normal(0, 10), class = Intercept, resp = yilr1),
prior(normal(0, 10), class = b, resp = yilr1),
prior(normal(0, 10), class = Intercept, resp = yilr2),
prior(normal(0, 10), class = b, resp = yilr2),
prior(normal(0, 10), class = Intercept, resp = yilr3),
prior(normal(0, 10), class = b, resp = yilr3))
formula.1 <- bf_ilr_1 + bf_ilr_2 + bf_ilr_3+  set_rescor(TRUE)
model1 <- brm(
bf_ilr_1 + bf_ilr_2 + bf_ilr_3+  set_rescor(TRUE),
data   = data,
prior  = bprior,
chains = 2,
cores  = 2,
iter   = 5000,
)
summary(model1)
model1
}
n <- 100
m <- 3
betas <- c(1 ,-0.5, +1, -0.5,
-0.5, 1, -1, 0,
-2, 1, -0.5, -0.5)
sigma <- c(0.1, 0.05, 0.08)
#rho <- rep(0.9, m)
rho <- c(0.5,0.2,0.8)
set.seed(100)
x <- matrix(rnorm(m*n, 10, 1), ncol = m)
data_test3 <- simulation(beta = matrix(betas, byrow = TRUE, ncol = m +1 ),
sigma = sigma,
rho = rho,
n = n,
x = x)
data_test3[,c("x1", "x2", "x3")] %>% cor(.)
### ----- 3.2. Plotting in the Euclidean space --- ####
data_test3$yilr1
data_p <- data_test3[,c("yilr1", "yilr2", "yilr3")] %>% compositions::ilrInv(.) %>%
.[,1:4] %>% as.data.frame(.) *100
colnames(data_p) <- paste0("y", 1:4)
summary(data_p)
### ----- 3.3. Ggtern in three dimensional space --- ####
library(ggtern)
# var = "Elevation (m)"
p_data <- ggtern(data = data_p, aes(x = y1, y = y2, z = y3,
col = y4)) +
geom_point(size = 3) +
labs(x = "y1", y = "y2", z = "y3") +
#theme_clockwise() +
theme_showarrows() +
theme(legend.position = "bottom",
legend.key.height = unit(0.4, "cm"),
legend.key.width = unit(1, "cm"),
legend.title = element_text(size = 11),
legend.text = element_text(size = 11),
axis.text=element_text(size=12),
axis.title=element_text(size=12,face="bold")) +
#guides(fill = guide_legend(title.position="top", title.hjust = 0.5)) +
scale_color_viridis(option = "E", direction = -1)
p_data
# pdf("figures/data_linear_regression.pdf", width = 6, height = 5)
# p_data
# dev.off()
### --- 4. Fitting the models --- ####
#We fit model with all the covariates
mod_test3_1 <- fit(data = data_test3,
formula1 = "x1 + x2 + x3")
mod_test3_3 <- fit(data = data_test3,
formula1 = "x1 + x2")
#mod_test3_4 <- fit(data = data_test3, formula1 = "x1 + x3")
mod_test3_5 <- fit(data = data_test3,
formula1 = "x1")
mod_test3_6 <- fit(data = data_test3,
formula1 = "x2")
set.seed(20)
data_test3$x3 <- rnorm(n)
mod_test3_8 <- fit(data = data_test3, formula1 = "x1 + x2 + x3")
mod_test3_10 <- fit(data = data_test3, formula1 = "x3")
list_mod <- list(mod_test3_1, mod_test3_8, mod_test3_3, mod_test3_5, mod_test3_6, mod_test3_10)
m1 <- 6
list_mod %>%
sapply(., bayes_R2.CoDa) %>%
as.data.frame() %>%
tidyr::pivot_longer(., cols = 1:m1,  names_to = "fit", values_to = "R_squared")-> r_squared
### --- 2. Loading the functions for computing R2 --- ####
source("functions/bayes_R2.R")
m1 <- 6
list_mod %>%
sapply(., bayes_R2.CoDa) %>%
as.data.frame() %>%
tidyr::pivot_longer(., cols = all_of(1:m1),  names_to = "fit", values_to = "R_squared")-> r_squared
#' Computing posterior distribution for r.squared in compositional data analysis
#'
#' `bayes_R2.CoDa` Function to compute posterior distribution of r.squared in compositional data analysis
#'
#' @param model compositional model fitted using bamlss
#' @param nsamples number of samples to be used when the r.squared is computed
#' @param type if like residuals based residual variance, if not, based on residuals
#' @param resp_names names of the response variable transformed in the ilr coordinates. If NULL, the variables which contains the word ilr are used.
#' @return simulations of the posterior distribution of r.squared
#'
#' @export
#' @import brms
#' @import berryFunctions
#' @author Joaquín Martínez-Minaya <\email{jomarminaya@@gmail.com}>
bayes_R2.CoDa <- function(model1, type = "like", resp_names = NULL)
{
y_pred <- posterior_epred(model1)
#For each linear predictor
var_fit <- matrix(nrow = dim(y_pred)[1], ncol = dim(y_pred)[3])
for (i in 1:dim(y_pred)[3])
{
var_fit[,i] <- apply(y_pred[,,i], 1, var)
}
var_fit_tot <- apply(var_fit, 1, sum)
if(type == "like")
{
# Residual fit
sigma2 <- as.matrix(model1, pars = c("sigma"))^2
#sigma2 <- as.matrix(model1, variable = "sigma")^2
var_res <- apply(sigma2, 1, sum)
} else{
dim(y_pred)
error <- array(NA, dim = dim(y_pred))
if(is.null(resp_names))
{
resp_names <- model1$data %>% colnames(.)
resp_names <- resp_names[grep("ilr", resp_names)]
}
y <- model1$data[,resp_names]
error <- 1:dim(y_pred)[1] %>%
lapply(., function(x) y_pred[x,,] - y) %>%
berryFunctions::l2array(.) %>%
aperm(., c(3,1,2))
var_error <- matrix(nrow = dim(y_pred)[1], ncol = dim(y_pred)[3])
for (i in 1:dim(y_pred)[3])
{
var_error[,i] <- apply(error[,,i], 1, var)
}
var_res <- apply(var_error, 1, sum)
}
r.squared <- var_fit_tot/(var_fit_tot + var_res)
r.squared
}
list_mod %>%
sapply(., bayes_R2.CoDa) %>%
as.data.frame() %>%
tidyr::pivot_longer(., cols = all_of(1:m1),  names_to = "fit", values_to = "R_squared")-> r_squared
debugonce(bayes_R2.CoDa)
m1 <- 6
list_mod %>%
sapply(., bayes_R2.CoDa) %>%
as.data.frame() %>%
tidyr::pivot_longer(., cols = all_of(1:m1),  names_to = "fit", values_to = "R_squared")-> r_squared
sigma2 <- as.matrix(model1, variable = "sigma")^2
sigma2 <- posterior::as_draws_matrix(model1)[,"sigma"]^2
version(brms)
version
library(brms)
library(compositions)
library(dplyr)
library(MASS)
library(brms)
library(ggplot2)
library(brms)
library(pbapply)
library(gridExtra)
library(tidybayes)
install.packages("tidybayes")
library(dplyr)
library(MASS)
library(brms)
library(ggplot2)
library(brms)
library(pbapply)
library(gridExtra)
library(tidybayes)
library(mgcv)
library(viridis)
library(dplyr)
### --- 2. Loading the functions for computing R2 --- ####
source("functions/bayes_R2.R")
### --- 3. Functions to simulate and fit --- ####
simulation <- function(beta = matrix(c(-1, 1, 2 ,1), byrow = TRUE, ncol = 2),
sigma = c(10, 9),
rho   = 0.9,
n,
x = NULL)
{
dim(beta)
D1 <- dim(beta)[1]
D2 <- dim(beta)[2]
if(is.null(x)){
set.seed(314)
x <- cbind(1, matrix(rnorm((D2-1)*n), ncol = D2-1))
}else{
x <- cbind(1,x)
}
#Simulating
set.seed(314)
mu <- apply(beta, 1, function(y)x %*% y)
Sigma <- matrix(sigma, ncol = 1) %*% matrix(sigma, nrow = 1)
for(i in 1:length(rho))
{
for (j in 1:length(rho))
{
if(i == j)
{
Sigma[i,j] <- Sigma[i,j]
}else{
Sigma[i,j] <- rho[i + j - 2] * Sigma[i,j]
}
}
}
# Sigma <- rho*matrix(sigma, ncol = 1) %*% matrix(sigma, nrow = 1)
# diag(Sigma) <- diag(Sigma)/rho
mu %>%
apply(., 1, function(x)
mvrnorm( n  = 1,
mu = x,
Sigma = Sigma)) %>%
t(.)-> y
z <- ilrInv(y)
yilr <- ilr(z)
colnames(x) <- c("intercept", paste0("x", 1:(D2 -1)))
data <- data.frame(yilr, x[,-1])
colnames(data)[1:D1] <- paste0("yilr", c(1:D1))
data
}
fit <- function(data, covariate = TRUE, formula1 = "x1 + x2")
{
if(covariate == FALSE)
{
bf_ilr_1 <- bf(yilr1 ~ 1) + gaussian()
bf_ilr_2 <- bf(yilr2 ~ 1) + gaussian()
}else{
bf_ilr_1 <- bf(as.formula(paste0("yilr1 ~", formula1))) + gaussian()
bf_ilr_2 <- bf(as.formula(paste0("yilr2 ~", formula1))) + gaussian()
bf_ilr_3 <- bf(as.formula(paste0("yilr3 ~", formula1))) + gaussian()
}
#Fitting
bprior <-  c(prior(normal(0, 10), class = Intercept, resp = yilr1),
prior(normal(0, 10), class = b, resp = yilr1),
prior(normal(0, 10), class = Intercept, resp = yilr2),
prior(normal(0, 10), class = b, resp = yilr2),
prior(normal(0, 10), class = Intercept, resp = yilr3),
prior(normal(0, 10), class = b, resp = yilr3))
formula.1 <- bf_ilr_1 + bf_ilr_2 + bf_ilr_3+  set_rescor(TRUE)
model1 <- brm(
bf_ilr_1 + bf_ilr_2 + bf_ilr_3+  set_rescor(TRUE),
data   = data,
prior  = bprior,
chains = 2,
cores  = 2,
iter   = 5000,
)
summary(model1)
model1
}
n <- 100
m <- 3
betas <- c(1 ,-0.5, +1, -0.5,
-0.5, 1, -1, 0,
-2, 1, -0.5, -0.5)
sigma <- c(0.1, 0.05, 0.08)
#rho <- rep(0.9, m)
rho <- c(0.5,0.2,0.8)
set.seed(100)
x <- matrix(rnorm(m*n, 10, 1), ncol = m)
data_test3 <- simulation(beta = matrix(betas, byrow = TRUE, ncol = m +1 ),
sigma = sigma,
rho = rho,
n = n,
x = x)
data_test3[,c("x1", "x2", "x3")] %>% cor(.)
### ----- 3.2. Plotting in the Euclidean space --- ####
data_test3$yilr1
data_p <- data_test3[,c("yilr1", "yilr2", "yilr3")] %>% compositions::ilrInv(.) %>%
.[,1:4] %>% as.data.frame(.) *100
colnames(data_p) <- paste0("y", 1:4)
summary(data_p)
### ----- 3.3. Ggtern in three dimensional space --- ####
library(ggtern)
# var = "Elevation (m)"
p_data <- ggtern(data = data_p, aes(x = y1, y = y2, z = y3,
col = y4)) +
geom_point(size = 3) +
labs(x = "y1", y = "y2", z = "y3") +
#theme_clockwise() +
theme_showarrows() +
theme(legend.position = "bottom",
legend.key.height = unit(0.4, "cm"),
legend.key.width = unit(1, "cm"),
legend.title = element_text(size = 11),
legend.text = element_text(size = 11),
axis.text=element_text(size=12),
axis.title=element_text(size=12,face="bold")) +
#guides(fill = guide_legend(title.position="top", title.hjust = 0.5)) +
scale_color_viridis(option = "E", direction = -1)
p_data
### ----- 3.3. Ggtern in three dimensional space --- ####
library(ggtern)
install.packages("ggtern")
### ----- 3.3. Ggtern in three dimensional space --- ####
library(ggtern)
# var = "Elevation (m)"
p_data <- ggtern(data = data_p, aes(x = y1, y = y2, z = y3,
col = y4)) +
geom_point(size = 3) +
labs(x = "y1", y = "y2", z = "y3") +
#theme_clockwise() +
theme_showarrows() +
theme(legend.position = "bottom",
legend.key.height = unit(0.4, "cm"),
legend.key.width = unit(1, "cm"),
legend.title = element_text(size = 11),
legend.text = element_text(size = 11),
axis.text=element_text(size=12),
axis.title=element_text(size=12,face="bold")) +
#guides(fill = guide_legend(title.position="top", title.hjust = 0.5)) +
scale_color_viridis(option = "E", direction = -1)
p_data
### --- 4. Fitting the models --- ####
#We fit model with all the covariates
mod_test3_1 <- fit(data = data_test3,
formula1 = "x1 + x2 + x3")
